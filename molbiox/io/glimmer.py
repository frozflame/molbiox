#!/usr/bin/env python3
# encoding: utf-8

from collections import OrderedDict
from molbiox.frame import streaming, interactive

GLIMMER3_FIELDS = [
    ('orf',     None),
    ('head',    int),
    ('tail',    int),
    ('frame',   int),
    ('score',   float),
]


@interactive.castable
def read_g3_predict(infile):
    """
    Parse $TAG.predict file generated by glimmer3

    :param infile: a file-like object or path to the $TAG.predict file
    :return: a generator iterates ordered-dicts
    """

    contig = 'A.CONTIG'
    with streaming.FileWrapper(infile, 'r') as fw:

        for line in fw.file:
            line = line.strip()

            if line.startswith('>'):
                contig = line.strip()[1:] or 'A.CONTIG'
                continue
            else:
                values = line.strip().split()
                if len(values) < len(GLIMMER3_FIELDS):
                    raise ValueError('too few columns in data file')

                pairs = []
                for (key, type_), val in zip(GLIMMER3_FIELDS, values):
                    if type_:
                        val = type_(val)
                    pairs.append((key, val))

                pairs.insert(1, ('contig', contig))
                yield OrderedDict(pairs)


def write_g3_mcoordz(outfile, predicts, sep='\t'):
    """
    Generate coord file required by

        glimmer3/3.02b/libexec/multi-extract

    :param outfile: a file-like object or path to the output coord file
    :param predicts: an iterable as generated by `read_g3_predict`
    :param sep:
    :return: None
    """
    with streaming.FileWrapper(outfile, 'w') as fw:
        for predict in predicts:
            line = sep.join(str(x) for x in predict.values())
            # todo: newline as parameter
            fw.file.write(line + '\n')
